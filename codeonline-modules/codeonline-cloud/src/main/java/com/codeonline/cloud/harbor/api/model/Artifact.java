/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.codeonline.cloud.harbor.api.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Artifact
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-12-30T20:20:43.840Z")
public class Artifact {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("media_type")
  private String mediaType = null;

  @SerializedName("manifest_media_type")
  private String manifestMediaType = null;

  @SerializedName("project_id")
  private Long projectId = null;

  @SerializedName("repository_id")
  private Long repositoryId = null;

  @SerializedName("digest")
  private String digest = null;

  @SerializedName("size")
  private Long size = null;

  @SerializedName("icon")
  private String icon = null;

  @SerializedName("push_time")
  private String pushTime = null;

  @SerializedName("pull_time")
  private String pullTime = null;

  @SerializedName("extra_attrs")
  private ExtraAttrs extraAttrs = null;

  @SerializedName("annotations")
  private Annotations annotations = null;

  @SerializedName("references")
  private List<Reference> references = null;

  @SerializedName("tags")
  private List<Tag> tags = null;

  @SerializedName("addition_links")
  private AdditionLinks additionLinks = null;

  @SerializedName("labels")
  private List<Label> labels = null;

  @SerializedName("scan_overview")
  private ScanOverview scanOverview = null;

  @SerializedName("accessories")
  private List<Accessory> accessories = null;

  public Artifact id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the artifact
   * @return id
  **/
  @ApiModelProperty(value = "The ID of the artifact")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Artifact type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the artifact, e.g. image, chart, etc
   * @return type
  **/
  @ApiModelProperty(value = "The type of the artifact, e.g. image, chart, etc")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public Artifact mediaType(String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

   /**
   * The media type of the artifact
   * @return mediaType
  **/
  @ApiModelProperty(value = "The media type of the artifact")
  public String getMediaType() {
    return mediaType;
  }

  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
  }

  public Artifact manifestMediaType(String manifestMediaType) {
    this.manifestMediaType = manifestMediaType;
    return this;
  }

   /**
   * The manifest media type of the artifact
   * @return manifestMediaType
  **/
  @ApiModelProperty(value = "The manifest media type of the artifact")
  public String getManifestMediaType() {
    return manifestMediaType;
  }

  public void setManifestMediaType(String manifestMediaType) {
    this.manifestMediaType = manifestMediaType;
  }

  public Artifact projectId(Long projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * The ID of the project that the artifact belongs to
   * @return projectId
  **/
  @ApiModelProperty(value = "The ID of the project that the artifact belongs to")
  public Long getProjectId() {
    return projectId;
  }

  public void setProjectId(Long projectId) {
    this.projectId = projectId;
  }

  public Artifact repositoryId(Long repositoryId) {
    this.repositoryId = repositoryId;
    return this;
  }

   /**
   * The ID of the repository that the artifact belongs to
   * @return repositoryId
  **/
  @ApiModelProperty(value = "The ID of the repository that the artifact belongs to")
  public Long getRepositoryId() {
    return repositoryId;
  }

  public void setRepositoryId(Long repositoryId) {
    this.repositoryId = repositoryId;
  }

  public Artifact digest(String digest) {
    this.digest = digest;
    return this;
  }

   /**
   * The digest of the artifact
   * @return digest
  **/
  @ApiModelProperty(value = "The digest of the artifact")
  public String getDigest() {
    return digest;
  }

  public void setDigest(String digest) {
    this.digest = digest;
  }

  public Artifact size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * The size of the artifact
   * @return size
  **/
  @ApiModelProperty(value = "The size of the artifact")
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }

  public Artifact icon(String icon) {
    this.icon = icon;
    return this;
  }

   /**
   * The digest of the icon
   * @return icon
  **/
  @ApiModelProperty(value = "The digest of the icon")
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }

  public Artifact pushTime(String pushTime) {
    this.pushTime = pushTime;
    return this;
  }

   /**
   * The push time of the artifact
   * @return pushTime
  **/
  @ApiModelProperty(value = "The push time of the artifact")
  public String getPushTime() {
    return pushTime;
  }

  public void setPushTime(String pushTime) {
    this.pushTime = pushTime;
  }

  public Artifact pullTime(String pullTime) {
    this.pullTime = pullTime;
    return this;
  }

   /**
   * The latest pull time of the artifact
   * @return pullTime
  **/
  @ApiModelProperty(value = "The latest pull time of the artifact")
  public String getPullTime() {
    return pullTime;
  }

  public void setPullTime(String pullTime) {
    this.pullTime = pullTime;
  }

  public Artifact extraAttrs(ExtraAttrs extraAttrs) {
    this.extraAttrs = extraAttrs;
    return this;
  }

   /**
   * Get extraAttrs
   * @return extraAttrs
  **/
  @ApiModelProperty(value = "")
  public ExtraAttrs getExtraAttrs() {
    return extraAttrs;
  }

  public void setExtraAttrs(ExtraAttrs extraAttrs) {
    this.extraAttrs = extraAttrs;
  }

  public Artifact annotations(Annotations annotations) {
    this.annotations = annotations;
    return this;
  }

   /**
   * Get annotations
   * @return annotations
  **/
  @ApiModelProperty(value = "")
  public Annotations getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Annotations annotations) {
    this.annotations = annotations;
  }

  public Artifact references(List<Reference> references) {
    this.references = references;
    return this;
  }

  public Artifact addReferencesItem(Reference referencesItem) {
    if (this.references == null) {
      this.references = new ArrayList<Reference>();
    }
    this.references.add(referencesItem);
    return this;
  }

   /**
   * Get references
   * @return references
  **/
  @ApiModelProperty(value = "")
  public List<Reference> getReferences() {
    return references;
  }

  public void setReferences(List<Reference> references) {
    this.references = references;
  }

  public Artifact tags(List<Tag> tags) {
    this.tags = tags;
    return this;
  }

  public Artifact addTagsItem(Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<Tag>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @ApiModelProperty(value = "")
  public List<Tag> getTags() {
    return tags;
  }

  public void setTags(List<Tag> tags) {
    this.tags = tags;
  }

  public Artifact additionLinks(AdditionLinks additionLinks) {
    this.additionLinks = additionLinks;
    return this;
  }

   /**
   * Get additionLinks
   * @return additionLinks
  **/
  @ApiModelProperty(value = "")
  public AdditionLinks getAdditionLinks() {
    return additionLinks;
  }

  public void setAdditionLinks(AdditionLinks additionLinks) {
    this.additionLinks = additionLinks;
  }

  public Artifact labels(List<Label> labels) {
    this.labels = labels;
    return this;
  }

  public Artifact addLabelsItem(Label labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<Label>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  @ApiModelProperty(value = "")
  public List<Label> getLabels() {
    return labels;
  }

  public void setLabels(List<Label> labels) {
    this.labels = labels;
  }

  public Artifact scanOverview(ScanOverview scanOverview) {
    this.scanOverview = scanOverview;
    return this;
  }

   /**
   * The overview of the scan result.
   * @return scanOverview
  **/
  @ApiModelProperty(value = "The overview of the scan result.")
  public ScanOverview getScanOverview() {
    return scanOverview;
  }

  public void setScanOverview(ScanOverview scanOverview) {
    this.scanOverview = scanOverview;
  }

  public Artifact accessories(List<Accessory> accessories) {
    this.accessories = accessories;
    return this;
  }

  public Artifact addAccessoriesItem(Accessory accessoriesItem) {
    if (this.accessories == null) {
      this.accessories = new ArrayList<Accessory>();
    }
    this.accessories.add(accessoriesItem);
    return this;
  }

   /**
   * Get accessories
   * @return accessories
  **/
  @ApiModelProperty(value = "")
  public List<Accessory> getAccessories() {
    return accessories;
  }

  public void setAccessories(List<Accessory> accessories) {
    this.accessories = accessories;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Artifact artifact = (Artifact) o;
    return Objects.equals(this.id, artifact.id) &&
        Objects.equals(this.type, artifact.type) &&
        Objects.equals(this.mediaType, artifact.mediaType) &&
        Objects.equals(this.manifestMediaType, artifact.manifestMediaType) &&
        Objects.equals(this.projectId, artifact.projectId) &&
        Objects.equals(this.repositoryId, artifact.repositoryId) &&
        Objects.equals(this.digest, artifact.digest) &&
        Objects.equals(this.size, artifact.size) &&
        Objects.equals(this.icon, artifact.icon) &&
        Objects.equals(this.pushTime, artifact.pushTime) &&
        Objects.equals(this.pullTime, artifact.pullTime) &&
        Objects.equals(this.extraAttrs, artifact.extraAttrs) &&
        Objects.equals(this.annotations, artifact.annotations) &&
        Objects.equals(this.references, artifact.references) &&
        Objects.equals(this.tags, artifact.tags) &&
        Objects.equals(this.additionLinks, artifact.additionLinks) &&
        Objects.equals(this.labels, artifact.labels) &&
        Objects.equals(this.scanOverview, artifact.scanOverview) &&
        Objects.equals(this.accessories, artifact.accessories);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, mediaType, manifestMediaType, projectId, repositoryId, digest, size, icon, pushTime, pullTime, extraAttrs, annotations, references, tags, additionLinks, labels, scanOverview, accessories);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Artifact {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    manifestMediaType: ").append(toIndentedString(manifestMediaType)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    repositoryId: ").append(toIndentedString(repositoryId)).append("\n");
    sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    pushTime: ").append(toIndentedString(pushTime)).append("\n");
    sb.append("    pullTime: ").append(toIndentedString(pullTime)).append("\n");
    sb.append("    extraAttrs: ").append(toIndentedString(extraAttrs)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    additionLinks: ").append(toIndentedString(additionLinks)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    scanOverview: ").append(toIndentedString(scanOverview)).append("\n");
    sb.append("    accessories: ").append(toIndentedString(accessories)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

