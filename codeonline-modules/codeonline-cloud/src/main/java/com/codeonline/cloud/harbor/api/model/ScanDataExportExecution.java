/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.codeonline.cloud.harbor.api.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * The replication execution
 */
@ApiModel(description = "The replication execution")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-12-30T20:20:43.840Z")
public class ScanDataExportExecution {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("user_id")
  private Integer userId = null;

  @SerializedName("status")
  private String status = null;

  @SerializedName("trigger")
  private String trigger = null;

  @SerializedName("start_time")
  private String startTime = null;

  @SerializedName("end_time")
  private String endTime = null;

  @SerializedName("status_text")
  private String statusText = null;

  @SerializedName("user_name")
  private String userName = null;

  @SerializedName("file_present")
  private Boolean filePresent = null;

  public ScanDataExportExecution id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the execution
   * @return id
  **/
  @ApiModelProperty(value = "The ID of the execution")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public ScanDataExportExecution userId(Integer userId) {
    this.userId = userId;
    return this;
  }

   /**
   * The ID if the user triggering the export job
   * @return userId
  **/
  @ApiModelProperty(value = "The ID if the user triggering the export job")
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }

  public ScanDataExportExecution status(String status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the execution
   * @return status
  **/
  @ApiModelProperty(value = "The status of the execution")
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }

  public ScanDataExportExecution trigger(String trigger) {
    this.trigger = trigger;
    return this;
  }

   /**
   * The trigger mode
   * @return trigger
  **/
  @ApiModelProperty(value = "The trigger mode")
  public String getTrigger() {
    return trigger;
  }

  public void setTrigger(String trigger) {
    this.trigger = trigger;
  }

  public ScanDataExportExecution startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * The start time
   * @return startTime
  **/
  @ApiModelProperty(value = "The start time")
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }

  public ScanDataExportExecution endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * The end time
   * @return endTime
  **/
  @ApiModelProperty(value = "The end time")
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }

  public ScanDataExportExecution statusText(String statusText) {
    this.statusText = statusText;
    return this;
  }

   /**
   * The status text
   * @return statusText
  **/
  @ApiModelProperty(value = "The status text")
  public String getStatusText() {
    return statusText;
  }

  public void setStatusText(String statusText) {
    this.statusText = statusText;
  }

  public ScanDataExportExecution userName(String userName) {
    this.userName = userName;
    return this;
  }

   /**
   * The name of the user triggering the job
   * @return userName
  **/
  @ApiModelProperty(value = "The name of the user triggering the job")
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }

  public ScanDataExportExecution filePresent(Boolean filePresent) {
    this.filePresent = filePresent;
    return this;
  }

   /**
   * Indicates whether the export artifact is present in registry
   * @return filePresent
  **/
  @ApiModelProperty(value = "Indicates whether the export artifact is present in registry")
  public Boolean isFilePresent() {
    return filePresent;
  }

  public void setFilePresent(Boolean filePresent) {
    this.filePresent = filePresent;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScanDataExportExecution scanDataExportExecution = (ScanDataExportExecution) o;
    return Objects.equals(this.id, scanDataExportExecution.id) &&
        Objects.equals(this.userId, scanDataExportExecution.userId) &&
        Objects.equals(this.status, scanDataExportExecution.status) &&
        Objects.equals(this.trigger, scanDataExportExecution.trigger) &&
        Objects.equals(this.startTime, scanDataExportExecution.startTime) &&
        Objects.equals(this.endTime, scanDataExportExecution.endTime) &&
        Objects.equals(this.statusText, scanDataExportExecution.statusText) &&
        Objects.equals(this.userName, scanDataExportExecution.userName) &&
        Objects.equals(this.filePresent, scanDataExportExecution.filePresent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, status, trigger, startTime, endTime, statusText, userName, filePresent);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScanDataExportExecution {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    statusText: ").append(toIndentedString(statusText)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    filePresent: ").append(toIndentedString(filePresent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

