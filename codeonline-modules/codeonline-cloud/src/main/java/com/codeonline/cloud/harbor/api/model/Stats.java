/*
 * Harbor API
 * These APIs provide services for manipulating Harbor project.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.codeonline.cloud.harbor.api.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * Stats provides the overall progress of the scan all process.
 */
@ApiModel(description = "Stats provides the overall progress of the scan all process.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-12-30T20:20:43.840Z")
public class Stats {
  @SerializedName("total")
  private Integer total = null;

  @SerializedName("completed")
  private Integer completed = null;

  @SerializedName("metrics")
  private Map<String, Integer> metrics = null;

  @SerializedName("ongoing")
  private Boolean ongoing = null;

  /**
   * The trigger of the scan all job.
   */
  @JsonAdapter(TriggerEnum.Adapter.class)
  public enum TriggerEnum {
    MANUAL("Manual"),
    
    SCHEDULE("Schedule"),
    
    EVENT("Event");

    private String value;

    TriggerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TriggerEnum fromValue(String text) {
      for (TriggerEnum b : TriggerEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TriggerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TriggerEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TriggerEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("trigger")
  private TriggerEnum trigger = null;

  public Stats total(Integer total) {
    this.total = total;
    return this;
  }

   /**
   * The total number of scan processes triggered by the scan all action
   * @return total
  **/
  @ApiModelProperty(example = "100", value = "The total number of scan processes triggered by the scan all action")
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }

  public Stats completed(Integer completed) {
    this.completed = completed;
    return this;
  }

   /**
   * The number of the finished scan processes triggered by the scan all action
   * @return completed
  **/
  @ApiModelProperty(example = "90", value = "The number of the finished scan processes triggered by the scan all action")
  public Integer getCompleted() {
    return completed;
  }

  public void setCompleted(Integer completed) {
    this.completed = completed;
  }

  public Stats metrics(Map<String, Integer> metrics) {
    this.metrics = metrics;
    return this;
  }

  public Stats putMetricsItem(String key, Integer metricsItem) {
    if (this.metrics == null) {
      this.metrics = new HashMap<String, Integer>();
    }
    this.metrics.put(key, metricsItem);
    return this;
  }

   /**
   * The metrics data for the each status
   * @return metrics
  **/
  @ApiModelProperty(example = "{\"Success\":5,\"Error\":2,\"Running\":3}", value = "The metrics data for the each status")
  public Map<String, Integer> getMetrics() {
    return metrics;
  }

  public void setMetrics(Map<String, Integer> metrics) {
    this.metrics = metrics;
  }

  public Stats ongoing(Boolean ongoing) {
    this.ongoing = ongoing;
    return this;
  }

   /**
   * A flag indicating job status of scan all.
   * @return ongoing
  **/
  @ApiModelProperty(value = "A flag indicating job status of scan all.")
  public Boolean isOngoing() {
    return ongoing;
  }

  public void setOngoing(Boolean ongoing) {
    this.ongoing = ongoing;
  }

  public Stats trigger(TriggerEnum trigger) {
    this.trigger = trigger;
    return this;
  }

   /**
   * The trigger of the scan all job.
   * @return trigger
  **/
  @ApiModelProperty(value = "The trigger of the scan all job.")
  public TriggerEnum getTrigger() {
    return trigger;
  }

  public void setTrigger(TriggerEnum trigger) {
    this.trigger = trigger;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Stats stats = (Stats) o;
    return Objects.equals(this.total, stats.total) &&
        Objects.equals(this.completed, stats.completed) &&
        Objects.equals(this.metrics, stats.metrics) &&
        Objects.equals(this.ongoing, stats.ongoing) &&
        Objects.equals(this.trigger, stats.trigger);
  }

  @Override
  public int hashCode() {
    return Objects.hash(total, completed, metrics, ongoing, trigger);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Stats {\n");
    
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    ongoing: ").append(toIndentedString(ongoing)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

